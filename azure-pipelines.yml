# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-18.04'

resources:
  containers:
  - container: tests
    image: ubuntu:18.04
    options: '-v /usr/bin/sudo:/usr/bin/sudo -v /usr/lib/sudo/libsudo_util.so.0:/usr/lib/sudo/libsudo_util.so.0 -v /usr/lib/sudo/sudoers.so:/usr/lib/sudo/sudoers.so -v /etc/sudoers:/etc/sudoers'

container: tests

steps:
- task: CmdLine@2
  inputs:
    script: |
      #sudo apt-get update
      #sudo apt-get install -y ca-certificates
      #sudo update-ca-certificates

- task: CmdLine@2
  inputs:
    script: |
      sudo apt-get update
      sudo apt-get -qq -y install curl
- task: CmdLine@2
  name: ProduceVar
  inputs:
    script: |
      sudo mkdir -p $AGENT_TOOLSDIRECTORY/_jfrog/current
      curl -fL https://getcli.jfrog.io | sh
      sudo chmod +x jfrog
      echo "FINISHED DOWNLOADING"
      #sudo mv jfrog $AGENT_TOOLSDIRECTORY/_jfrog/current/

      export AGENT_WORKFOLDER=/__w/1/s/jfcli
      sudo mkdir -p $AGENT_WORKFOLDER/_jfrog/current
      sudo mv jfrog $AGENT_WORKFOLDER/_jfrog/current/
      cd $AGENT_WORKFOLDER/_jfrog/current/

      #cd $AGENT_TOOLSDIRECTORY/_jfrog/current/
      pwd
      ls -al
- task: ArtifactoryGenericDownload@2
  env:
    AGENT_WORKFOLDER: "/__w/1/s/jfcli"
  inputs:
    connection: 'barb3-aol'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "generic-local/tfs-sanity/a1.in*",
            "target": "files1/39/",
            "flat": "true"
          }
        ]
      }
    collectBuildInfo: true
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    failNoOp: false
- task: ArtifactoryPublishBuildInfo@1
  inputs:
    artifactoryService: 'barb3-aol'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'